import * as fs from 'fs';
import * as path from 'path';
import { promises as fsPromises } from 'fs';
import { AnalysisReport, SessionReport } from '../models/report.js';
import { AnalysisResult } from '../core/session-analyzer.js';
import { VERSION } from '@claude-report-analyzer/shared/dist/index.js';

export class ReportGenerator {
  private outputDir: string;

  constructor(outputDir: string) {
    this.outputDir = outputDir;
  }

  async generateReport(
    analysisResults: Map<string, AnalysisResult>,
    sourcePath: string,
    filesAnalyzed: number
  ): Promise<string> {
    // 출력 디렉토리 생성
    await fsPromises.mkdir(this.outputDir, { recursive: true });

    // 세션별 리포트 생성
    const sessions: SessionReport[] = [];
    let totalMessages = 0;
    let totalCodeBlocks = 0;
    let earliestDate: string | null = null;
    let latestDate: string | null = null;
    const allTopics = new Map<string, number>();

    for (const [fileId, analysis] of analysisResults) {
      const sessionReport: SessionReport = {
        id: fileId,
        sessionCount: analysis.sessionCount,
        totalMessages: analysis.totalMessages,
        userMessages: analysis.userMessages,
        assistantMessages: analysis.assistantMessages,
        codeBlocks: analysis.codeBlocks,
        topics: analysis.topics,
        dateRange: {
          start: analysis.timestamps.first,
          end: analysis.timestamps.last
        }
      };

      sessions.push(sessionReport);
      totalMessages += analysis.totalMessages;
      totalCodeBlocks += analysis.codeBlocks;

      // 날짜 범위 업데이트
      if (analysis.timestamps.first) {
        if (!earliestDate || analysis.timestamps.first < earliestDate) {
          earliestDate = analysis.timestamps.first;
        }
      }
      if (analysis.timestamps.last) {
        if (!latestDate || analysis.timestamps.last > latestDate) {
          latestDate = analysis.timestamps.last;
        }
      }

      // 토픽 집계
      for (const topic of analysis.topics) {
        allTopics.set(topic, (allTopics.get(topic) || 0) + 1);
      }
    }

    // 상위 토픽 추출
    const topTopics = Array.from(allTopics.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10)
      .map(([topic]) => topic);

    // 최종 리포트 생성
    const report: AnalysisReport = {
      version: '1.0',
      analyzedAt: new Date().toISOString(),
      sourcePath,
      filesAnalyzed,
      sessions,
      summary: {
        totalSessions: sessions.length,
        totalMessages,
        totalCodeBlocks,
        dateRange: {
          start: earliestDate,
          end: latestDate
        },
        topTopics
      },
      metadata: {
        analyzerVersion: VERSION,
        platform: process.platform,
        nodeVersion: process.version
      }
    };

    // JSON 파일로 저장
    const timestamp = new Date().toISOString().replace(/:/g, '-').split('.')[0];
    const reportPath = path.join(this.outputDir, `analysis-report-${timestamp}.json`);
    await fsPromises.writeFile(reportPath, JSON.stringify(report, null, 2));

    return reportPath;
  }

  async generateMarkdownSummary(reportPath: string): Promise<string> {
    const reportContent = await fsPromises.readFile(reportPath, 'utf-8');
    const report: AnalysisReport = JSON.parse(reportContent);

    const markdown = `# Claude Report Analyzer - 분석 결과

## 📊 요약
- **분석 일시**: ${new Date(report.analyzedAt).toLocaleString('ko-KR')}
- **분석 대상**: ${report.sourcePath}
- **분석된 파일 수**: ${report.filesAnalyzed}개

## 📈 통계
- **총 세션 수**: ${report.summary.totalSessions}개
- **총 메시지 수**: ${report.summary.totalMessages}개
- **코드 블록 수**: ${report.summary.totalCodeBlocks}개

## 📅 날짜 범위
- **시작**: ${report.summary.dateRange.start ? new Date(report.summary.dateRange.start).toLocaleString('ko-KR') : 'N/A'}
- **종료**: ${report.summary.dateRange.end ? new Date(report.summary.dateRange.end).toLocaleString('ko-KR') : 'N/A'}

## 🏷️ 주요 토픽
${report.summary.topTopics.map((topic, index) => `${index + 1}. ${topic}`).join('\\n')}

## 📝 세션별 상세
${report.sessions.map(session => `
### ${session.id}
- 메시지 수: ${session.totalMessages}개 (사용자: ${session.userMessages}, 어시스턴트: ${session.assistantMessages})
- 코드 블록: ${session.codeBlocks}개
- 주요 키워드: ${session.topics.slice(0, 5).join(', ')}
`).join('\\n')}

---
*Generated by Claude Report Analyzer v${report.metadata.analyzerVersion}*
`;

    const markdownPath = reportPath.replace('.json', '.md');
    await fsPromises.writeFile(markdownPath, markdown);

    return markdownPath;
  }
}